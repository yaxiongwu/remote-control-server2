// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: rtc.proto

package rtc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Role int32

const (
	Role_Admin       Role = 0
	Role_VideoSource Role = 1
	Role_Control     Role = 2
	Role_Observe     Role = 3
	Role_Unknown     Role = 4
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "Admin",
		1: "VideoSource",
		2: "Control",
		3: "Observe",
		4: "Unknown",
	}
	Role_value = map[string]int32{
		"Admin":       0,
		"VideoSource": 1,
		"Control":     2,
		"Observe":     3,
		"Unknown":     4,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_rtc_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_rtc_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{0}
}

type SourceType int32

const (
	SourceType_Car    SourceType = 0
	SourceType_Feed   SourceType = 1
	SourceType_Camera SourceType = 2
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "Car",
		1: "Feed",
		2: "Camera",
	}
	SourceType_value = map[string]int32{
		"Car":    0,
		"Feed":   1,
		"Camera": 2,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_rtc_proto_enumTypes[1].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_rtc_proto_enumTypes[1]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{1}
}

type Target int32

const (
	Target_PUBLISHER  Target = 0
	Target_SUBSCRIBER Target = 1
)

// Enum value maps for Target.
var (
	Target_name = map[int32]string{
		0: "PUBLISHER",
		1: "SUBSCRIBER",
	}
	Target_value = map[string]int32{
		"PUBLISHER":  0,
		"SUBSCRIBER": 1,
	}
)

func (x Target) Enum() *Target {
	p := new(Target)
	*p = x
	return p
}

func (x Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Target) Descriptor() protoreflect.EnumDescriptor {
	return file_rtc_proto_enumTypes[2].Descriptor()
}

func (Target) Type() protoreflect.EnumType {
	return &file_rtc_proto_enumTypes[2]
}

func (x Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Target.Descriptor instead.
func (Target) EnumDescriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{2}
}

type MediaType int32

const (
	MediaType_MediaUnknown  MediaType = 0
	MediaType_UserMedia     MediaType = 1
	MediaType_ScreenCapture MediaType = 2
	MediaType_Cavans        MediaType = 3
	MediaType_Streaming     MediaType = 4
	MediaType_VoIP          MediaType = 5
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MediaUnknown",
		1: "UserMedia",
		2: "ScreenCapture",
		3: "Cavans",
		4: "Streaming",
		5: "VoIP",
	}
	MediaType_value = map[string]int32{
		"MediaUnknown":  0,
		"UserMedia":     1,
		"ScreenCapture": 2,
		"Cavans":        3,
		"Streaming":     4,
		"VoIP":          5,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_rtc_proto_enumTypes[3].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_rtc_proto_enumTypes[3]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{3}
}

type ViewSourceReply_Result int32

const (
	ViewSourceReply_Webrtc ViewSourceReply_Result = 0 //可以使用webrtc直连
	ViewSourceReply_Cloud  ViewSourceReply_Result = 1 //转云直播
	ViewSourceReply_Error  ViewSourceReply_Result = 2 //错误
)

// Enum value maps for ViewSourceReply_Result.
var (
	ViewSourceReply_Result_name = map[int32]string{
		0: "Webrtc",
		1: "Cloud",
		2: "Error",
	}
	ViewSourceReply_Result_value = map[string]int32{
		"Webrtc": 0,
		"Cloud":  1,
		"Error":  2,
	}
)

func (x ViewSourceReply_Result) Enum() *ViewSourceReply_Result {
	p := new(ViewSourceReply_Result)
	*p = x
	return p
}

func (x ViewSourceReply_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewSourceReply_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_rtc_proto_enumTypes[4].Descriptor()
}

func (ViewSourceReply_Result) Type() protoreflect.EnumType {
	return &file_rtc_proto_enumTypes[4]
}

func (x ViewSourceReply_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewSourceReply_Result.Descriptor instead.
func (ViewSourceReply_Result) EnumDescriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6, 0}
}

type TrackEvent_State int32

const (
	TrackEvent_ADD    TrackEvent_State = 0
	TrackEvent_UPDATE TrackEvent_State = 1
	TrackEvent_REMOVE TrackEvent_State = 2
)

// Enum value maps for TrackEvent_State.
var (
	TrackEvent_State_name = map[int32]string{
		0: "ADD",
		1: "UPDATE",
		2: "REMOVE",
	}
	TrackEvent_State_value = map[string]int32{
		"ADD":    0,
		"UPDATE": 1,
		"REMOVE": 2,
	}
)

func (x TrackEvent_State) Enum() *TrackEvent_State {
	p := new(TrackEvent_State)
	*p = x
	return p
}

func (x TrackEvent_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackEvent_State) Descriptor() protoreflect.EnumDescriptor {
	return file_rtc_proto_enumTypes[5].Descriptor()
}

func (TrackEvent_State) Type() protoreflect.EnumType {
	return &file_rtc_proto_enumTypes[5]
}

func (x TrackEvent_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackEvent_State.Descriptor instead.
func (TrackEvent_State) EnumDescriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{15, 0}
}

//创建一个新的视频源
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid        string            `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Uid        string            `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Name       string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SourceType SourceType        `protobuf:"varint,4,opt,name=sourceType,proto3,enum=rtc.SourceType" json:"sourceType,omitempty"`
	Config     map[string]string `protobuf:"bytes,5,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *RegisterRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterRequest) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_Car
}

func (x *RegisterRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

//创建视频源的回复
type RegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RegisterReply) Reset() {
	*x = RegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReply) ProtoMessage() {}

func (x *RegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReply.ProtoReflect.Descriptor instead.
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//向服务器获取在线的视频源
type OnLineSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType SourceType        `protobuf:"varint,1,opt,name=sourceType,proto3,enum=rtc.SourceType" json:"sourceType,omitempty"`
	Config     map[string]string `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OnLineSourceRequest) Reset() {
	*x = OnLineSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnLineSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnLineSourceRequest) ProtoMessage() {}

func (x *OnLineSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnLineSourceRequest.ProtoReflect.Descriptor instead.
func (*OnLineSourceRequest) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{2}
}

func (x *OnLineSourceRequest) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_Car
}

func (x *OnLineSourceRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

//在线的视频源
type OnLineSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OnLineSources) Reset() {
	*x = OnLineSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnLineSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnLineSources) ProtoMessage() {}

func (x *OnLineSources) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnLineSources.ProtoReflect.Descriptor instead.
func (*OnLineSources) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{3}
}

func (x *OnLineSources) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *OnLineSources) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//服务器返回在线的视频源
type OnLineSourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnLineSources []*OnLineSources `protobuf:"bytes,1,rep,name=onLineSources,proto3" json:"onLineSources,omitempty"`
	Success       bool             `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error         *Error           `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OnLineSourceReply) Reset() {
	*x = OnLineSourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnLineSourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnLineSourceReply) ProtoMessage() {}

func (x *OnLineSourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnLineSourceReply.ProtoReflect.Descriptor instead.
func (*OnLineSourceReply) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{4}
}

func (x *OnLineSourceReply) GetOnLineSources() []*OnLineSources {
	if x != nil {
		return x.OnLineSources
	}
	return nil
}

func (x *OnLineSourceReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *OnLineSourceReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

//观看视频申请
type ViewSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//string sid = 1;
	Uid         string              `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Config      map[string]string   `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description *SessionDescription `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ViewSourceRequest) Reset() {
	*x = ViewSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewSourceRequest) ProtoMessage() {}

func (x *ViewSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewSourceRequest.ProtoReflect.Descriptor instead.
func (*ViewSourceRequest) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{5}
}

func (x *ViewSourceRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ViewSourceRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ViewSourceRequest) GetDescription() *SessionDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

//申请观看视频的结果
type ViewSourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Result  ViewSourceReply_Result `protobuf:"varint,3,opt,name=result,proto3,enum=rtc.ViewSourceReply_Result" json:"result,omitempty"`
}

func (x *ViewSourceReply) Reset() {
	*x = ViewSourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewSourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewSourceReply) ProtoMessage() {}

func (x *ViewSourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewSourceReply.ProtoReflect.Descriptor instead.
func (*ViewSourceReply) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{6}
}

func (x *ViewSourceReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ViewSourceReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ViewSourceReply) GetResult() ViewSourceReply_Result {
	if x != nil {
		return x.Result
	}
	return ViewSourceReply_Webrtc
}

//控制申请
type WantControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   string            `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     string            `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Config map[string]string `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 'offer' | 'answer'
	SdpType string `protobuf:"bytes,4,opt,name=sdpType,proto3" json:"sdpType,omitempty"`
	// sdp contents
	Sdp string `protobuf:"bytes,5,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *WantControlRequest) Reset() {
	*x = WantControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WantControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantControlRequest) ProtoMessage() {}

func (x *WantControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantControlRequest.ProtoReflect.Descriptor instead.
func (*WantControlRequest) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{7}
}

func (x *WantControlRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *WantControlRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *WantControlRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *WantControlRequest) GetSdpType() string {
	if x != nil {
		return x.SdpType
	}
	return ""
}

func (x *WantControlRequest) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

//控制申请的结果
type WantControlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                 bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	IdleOrNot               bool   `protobuf:"varint,2,opt,name=idleOrNot,proto3" json:"idleOrNot,omitempty"`                             //是否空闲可控
	RestTimeSecOfControling uint32 `protobuf:"varint,3,opt,name=restTimeSecOfControling,proto3" json:"restTimeSecOfControling,omitempty"` //现在正在控制的这个人还剩多少时间,单位秒
	NumOfWaiting            uint32 `protobuf:"varint,4,opt,name=numOfWaiting,proto3" json:"numOfWaiting,omitempty"`                       //排队的人数，不包括现在控制的那个
	Error                   *Error `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	From                    string `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	To                      string `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
	// 'offer' | 'answer'
	SdpType string `protobuf:"bytes,8,opt,name=sdpType,proto3" json:"sdpType,omitempty"`
	// sdp contents
	Sdp string `protobuf:"bytes,9,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *WantControlReply) Reset() {
	*x = WantControlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WantControlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantControlReply) ProtoMessage() {}

func (x *WantControlReply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantControlReply.ProtoReflect.Descriptor instead.
func (*WantControlReply) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{8}
}

func (x *WantControlReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WantControlReply) GetIdleOrNot() bool {
	if x != nil {
		return x.IdleOrNot
	}
	return false
}

func (x *WantControlReply) GetRestTimeSecOfControling() uint32 {
	if x != nil {
		return x.RestTimeSecOfControling
	}
	return 0
}

func (x *WantControlReply) GetNumOfWaiting() uint32 {
	if x != nil {
		return x.NumOfWaiting
	}
	return 0
}

func (x *WantControlReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *WantControlReply) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *WantControlReply) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *WantControlReply) GetSdpType() string {
	if x != nil {
		return x.SdpType
	}
	return ""
}

func (x *WantControlReply) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid         string              `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Uid         string              `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Config      map[string]string   `protobuf:"bytes,3,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description *SessionDescription `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{9}
}

func (x *JoinRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *JoinRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JoinRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *JoinRequest) GetDescription() *SessionDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

type JoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error       *Error              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Description *SessionDescription `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *JoinReply) Reset() {
	*x = JoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinReply) ProtoMessage() {}

func (x *JoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinReply.ProtoReflect.Descriptor instead.
func (*JoinReply) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{10}
}

func (x *JoinReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *JoinReply) GetDescription() *SessionDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

type TrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// basic info
	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Kind     string    `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Muted    bool      `protobuf:"varint,3,opt,name=muted,proto3" json:"muted,omitempty"`
	Type     MediaType `protobuf:"varint,4,opt,name=type,proto3,enum=rtc.MediaType" json:"type,omitempty"`
	StreamId string    `protobuf:"bytes,5,opt,name=streamId,proto3" json:"streamId,omitempty"`
	Label    string    `protobuf:"bytes,6,opt,name=label,proto3" json:"label,omitempty"`
	// extra info
	Layer     string `protobuf:"bytes,7,opt,name=layer,proto3" json:"layer,omitempty"` // simulcast or svc layer
	Width     uint32 `protobuf:"varint,8,opt,name=width,proto3" json:"width,omitempty"`
	Height    uint32 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	FrameRate uint32 `protobuf:"varint,10,opt,name=frameRate,proto3" json:"frameRate,omitempty"`
}

func (x *TrackInfo) Reset() {
	*x = TrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackInfo) ProtoMessage() {}

func (x *TrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackInfo.ProtoReflect.Descriptor instead.
func (*TrackInfo) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{11}
}

func (x *TrackInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrackInfo) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *TrackInfo) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *TrackInfo) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_MediaUnknown
}

func (x *TrackInfo) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TrackInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TrackInfo) GetLayer() string {
	if x != nil {
		return x.Layer
	}
	return ""
}

func (x *TrackInfo) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TrackInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TrackInfo) GetFrameRate() uint32 {
	if x != nil {
		return x.FrameRate
	}
	return 0
}

type SessionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Target Target `protobuf:"varint,3,opt,name=target,proto3,enum=rtc.Target" json:"target,omitempty"`
	// 'offer' | 'answer'
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// sdp contents
	Sdp string `protobuf:"bytes,5,opt,name=sdp,proto3" json:"sdp,omitempty"`
	// sdp metdata
	TrackInfos []*TrackInfo `protobuf:"bytes,6,rep,name=trackInfos,proto3" json:"trackInfos,omitempty"`
}

func (x *SessionDescription) Reset() {
	*x = SessionDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDescription) ProtoMessage() {}

func (x *SessionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDescription.ProtoReflect.Descriptor instead.
func (*SessionDescription) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{12}
}

func (x *SessionDescription) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SessionDescription) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SessionDescription) GetTarget() Target {
	if x != nil {
		return x.Target
	}
	return Target_PUBLISHER
}

func (x *SessionDescription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SessionDescription) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *SessionDescription) GetTrackInfos() []*TrackInfo {
	if x != nil {
		return x.TrackInfos
	}
	return nil
}

type Trickle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Target Target `protobuf:"varint,3,opt,name=target,proto3,enum=rtc.Target" json:"target,omitempty"`
	Init   string `protobuf:"bytes,4,opt,name=init,proto3" json:"init,omitempty"`
}

func (x *Trickle) Reset() {
	*x = Trickle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trickle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trickle) ProtoMessage() {}

func (x *Trickle) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trickle.ProtoReflect.Descriptor instead.
func (*Trickle) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{13}
}

func (x *Trickle) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Trickle) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Trickle) GetTarget() Target {
	if x != nil {
		return x.Target
	}
	return Target_PUBLISHER
}

func (x *Trickle) GetInit() string {
	if x != nil {
		return x.Init
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{14}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TrackEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  TrackEvent_State `protobuf:"varint,1,opt,name=state,proto3,enum=rtc.TrackEvent_State" json:"state,omitempty"`
	Uid    string           `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Tracks []*TrackInfo     `protobuf:"bytes,3,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *TrackEvent) Reset() {
	*x = TrackEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEvent) ProtoMessage() {}

func (x *TrackEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEvent.ProtoReflect.Descriptor instead.
func (*TrackEvent) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{15}
}

func (x *TrackEvent) GetState() TrackEvent_State {
	if x != nil {
		return x.State
	}
	return TrackEvent_ADD
}

func (x *TrackEvent) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TrackEvent) GetTracks() []*TrackInfo {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId   string `protobuf:"bytes,2,opt,name=trackId,proto3" json:"trackId,omitempty"`
	Mute      bool   `protobuf:"varint,3,opt,name=mute,proto3" json:"mute,omitempty"`           // mute track or not
	Subscribe bool   `protobuf:"varint,4,opt,name=subscribe,proto3" json:"subscribe,omitempty"` // sub track or not
	Layer     string `protobuf:"bytes,5,opt,name=layer,proto3" json:"layer,omitempty"`          // simulcast or svc layer
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{16}
}

func (x *Subscription) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *Subscription) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *Subscription) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

func (x *Subscription) GetLayer() string {
	if x != nil {
		return x.Layer
	}
	return ""
}

type SubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{17}
}

func (x *SubscriptionRequest) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type SubscriptionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscriptionReply) Reset() {
	*x = SubscriptionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionReply) ProtoMessage() {}

func (x *SubscriptionReply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionReply.ProtoReflect.Descriptor instead.
func (*SubscriptionReply) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{18}
}

func (x *SubscriptionReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubscriptionReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type UpdateTrackReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateTrackReply) Reset() {
	*x = UpdateTrackReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTrackReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrackReply) ProtoMessage() {}

func (x *UpdateTrackReply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrackReply.ProtoReflect.Descriptor instead.
func (*UpdateTrackReply) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateTrackReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateTrackReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ActiveSpeaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Speakers []*AudioLevelSpeaker `protobuf:"bytes,1,rep,name=speakers,proto3" json:"speakers,omitempty"`
}

func (x *ActiveSpeaker) Reset() {
	*x = ActiveSpeaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveSpeaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveSpeaker) ProtoMessage() {}

func (x *ActiveSpeaker) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveSpeaker.ProtoReflect.Descriptor instead.
func (*ActiveSpeaker) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{20}
}

func (x *ActiveSpeaker) GetSpeakers() []*AudioLevelSpeaker {
	if x != nil {
		return x.Speakers
	}
	return nil
}

type AudioLevelSpeaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	// audio level
	Level float32 `protobuf:"fixed32,2,opt,name=level,proto3" json:"level,omitempty"`
	// speaker active or not
	Active bool `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *AudioLevelSpeaker) Reset() {
	*x = AudioLevelSpeaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLevelSpeaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLevelSpeaker) ProtoMessage() {}

func (x *AudioLevelSpeaker) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLevelSpeaker.ProtoReflect.Descriptor instead.
func (*AudioLevelSpeaker) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{21}
}

func (x *AudioLevelSpeaker) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *AudioLevelSpeaker) GetLevel() float32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AudioLevelSpeaker) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Request_Join
	//	*Request_Description
	//	*Request_Trickle
	//	*Request_Subscription
	//	*Request_Register
	//	*Request_OnLineSource
	//	*Request_ViewSource
	//	*Request_WantControl
	//	*Request_WantControlReply
	Payload isRequest_Payload `protobuf_oneof:"payload"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{22}
}

func (m *Request) GetPayload() isRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Request) GetJoin() *JoinRequest {
	if x, ok := x.GetPayload().(*Request_Join); ok {
		return x.Join
	}
	return nil
}

func (x *Request) GetDescription() *SessionDescription {
	if x, ok := x.GetPayload().(*Request_Description); ok {
		return x.Description
	}
	return nil
}

func (x *Request) GetTrickle() *Trickle {
	if x, ok := x.GetPayload().(*Request_Trickle); ok {
		return x.Trickle
	}
	return nil
}

func (x *Request) GetSubscription() *SubscriptionRequest {
	if x, ok := x.GetPayload().(*Request_Subscription); ok {
		return x.Subscription
	}
	return nil
}

func (x *Request) GetRegister() *RegisterRequest {
	if x, ok := x.GetPayload().(*Request_Register); ok {
		return x.Register
	}
	return nil
}

func (x *Request) GetOnLineSource() *OnLineSourceRequest {
	if x, ok := x.GetPayload().(*Request_OnLineSource); ok {
		return x.OnLineSource
	}
	return nil
}

func (x *Request) GetViewSource() *ViewSourceRequest {
	if x, ok := x.GetPayload().(*Request_ViewSource); ok {
		return x.ViewSource
	}
	return nil
}

func (x *Request) GetWantControl() *WantControlRequest {
	if x, ok := x.GetPayload().(*Request_WantControl); ok {
		return x.WantControl
	}
	return nil
}

func (x *Request) GetWantControlReply() *WantControlReply {
	if x, ok := x.GetPayload().(*Request_WantControlReply); ok {
		return x.WantControlReply
	}
	return nil
}

type isRequest_Payload interface {
	isRequest_Payload()
}

type Request_Join struct {
	// Basic API Request
	Join *JoinRequest `protobuf:"bytes,1,opt,name=join,proto3,oneof"`
}

type Request_Description struct {
	Description *SessionDescription `protobuf:"bytes,2,opt,name=description,proto3,oneof"`
}

type Request_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

type Request_Subscription struct {
	// Command
	Subscription *SubscriptionRequest `protobuf:"bytes,4,opt,name=subscription,proto3,oneof"`
}

type Request_Register struct {
	Register *RegisterRequest `protobuf:"bytes,5,opt,name=register,proto3,oneof"`
}

type Request_OnLineSource struct {
	OnLineSource *OnLineSourceRequest `protobuf:"bytes,6,opt,name=onLineSource,proto3,oneof"`
}

type Request_ViewSource struct {
	ViewSource *ViewSourceRequest `protobuf:"bytes,7,opt,name=viewSource,proto3,oneof"`
}

type Request_WantControl struct {
	WantControl *WantControlRequest `protobuf:"bytes,8,opt,name=wantControl,proto3,oneof"`
}

type Request_WantControlReply struct {
	WantControlReply *WantControlReply `protobuf:"bytes,9,opt,name=wantControlReply,proto3,oneof"` //最终由视频源决定wantControlReply，生成的这个reply需要由request发往服务器再转发
}

func (*Request_Join) isRequest_Payload() {}

func (*Request_Description) isRequest_Payload() {}

func (*Request_Trickle) isRequest_Payload() {}

func (*Request_Subscription) isRequest_Payload() {}

func (*Request_Register) isRequest_Payload() {}

func (*Request_OnLineSource) isRequest_Payload() {}

func (*Request_ViewSource) isRequest_Payload() {}

func (*Request_WantControl) isRequest_Payload() {}

func (*Request_WantControlReply) isRequest_Payload() {}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Reply_Join
	//	*Reply_Description
	//	*Reply_Trickle
	//	*Reply_TrackEvent
	//	*Reply_Subscription
	//	*Reply_Error
	//	*Reply_Register
	//	*Reply_OnLineSource
	//	*Reply_ViewSource
	//	*Reply_WantControl
	Payload isReply_Payload `protobuf_oneof:"payload"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_rtc_proto_rawDescGZIP(), []int{23}
}

func (m *Reply) GetPayload() isReply_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Reply) GetJoin() *JoinReply {
	if x, ok := x.GetPayload().(*Reply_Join); ok {
		return x.Join
	}
	return nil
}

func (x *Reply) GetDescription() *SessionDescription {
	if x, ok := x.GetPayload().(*Reply_Description); ok {
		return x.Description
	}
	return nil
}

func (x *Reply) GetTrickle() *Trickle {
	if x, ok := x.GetPayload().(*Reply_Trickle); ok {
		return x.Trickle
	}
	return nil
}

func (x *Reply) GetTrackEvent() *TrackEvent {
	if x, ok := x.GetPayload().(*Reply_TrackEvent); ok {
		return x.TrackEvent
	}
	return nil
}

func (x *Reply) GetSubscription() *SubscriptionReply {
	if x, ok := x.GetPayload().(*Reply_Subscription); ok {
		return x.Subscription
	}
	return nil
}

func (x *Reply) GetError() *Error {
	if x, ok := x.GetPayload().(*Reply_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Reply) GetRegister() *RegisterReply {
	if x, ok := x.GetPayload().(*Reply_Register); ok {
		return x.Register
	}
	return nil
}

func (x *Reply) GetOnLineSource() *OnLineSourceReply {
	if x, ok := x.GetPayload().(*Reply_OnLineSource); ok {
		return x.OnLineSource
	}
	return nil
}

func (x *Reply) GetViewSource() *ViewSourceReply {
	if x, ok := x.GetPayload().(*Reply_ViewSource); ok {
		return x.ViewSource
	}
	return nil
}

func (x *Reply) GetWantControl() *WantControlReply {
	if x, ok := x.GetPayload().(*Reply_WantControl); ok {
		return x.WantControl
	}
	return nil
}

type isReply_Payload interface {
	isReply_Payload()
}

type Reply_Join struct {
	// Basic API Reply
	Join *JoinReply `protobuf:"bytes,1,opt,name=join,proto3,oneof"`
}

type Reply_Description struct {
	Description *SessionDescription `protobuf:"bytes,2,opt,name=description,proto3,oneof"`
}

type Reply_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

type Reply_TrackEvent struct {
	// Event
	TrackEvent *TrackEvent `protobuf:"bytes,4,opt,name=trackEvent,proto3,oneof"`
}

type Reply_Subscription struct {
	// Command Reply
	Subscription *SubscriptionReply `protobuf:"bytes,5,opt,name=subscription,proto3,oneof"`
}

type Reply_Error struct {
	// Error
	Error *Error `protobuf:"bytes,7,opt,name=error,proto3,oneof"`
}

type Reply_Register struct {
	Register *RegisterReply `protobuf:"bytes,8,opt,name=register,proto3,oneof"`
}

type Reply_OnLineSource struct {
	OnLineSource *OnLineSourceReply `protobuf:"bytes,9,opt,name=onLineSource,proto3,oneof"`
}

type Reply_ViewSource struct {
	ViewSource *ViewSourceReply `protobuf:"bytes,10,opt,name=viewSource,proto3,oneof"`
}

type Reply_WantControl struct {
	WantControl *WantControlReply `protobuf:"bytes,11,opt,name=wantControl,proto3,oneof"`
}

func (*Reply_Join) isReply_Payload() {}

func (*Reply_Description) isReply_Payload() {}

func (*Reply_Trickle) isReply_Payload() {}

func (*Reply_TrackEvent) isReply_Payload() {}

func (*Reply_Subscription) isReply_Payload() {}

func (*Reply_Error) isReply_Payload() {}

func (*Reply_Register) isReply_Payload() {}

func (*Reply_OnLineSource) isReply_Payload() {}

func (*Reply_ViewSource) isReply_Payload() {}

func (*Reply_WantControl) isReply_Payload() {}

var File_rtc_proto protoreflect.FileDescriptor

var file_rtc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x74, 0x63,
	0x22, 0xef, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72,
	0x74, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xbf, 0x01, 0x0a, 0x13, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4f,
	0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x35, 0x0a, 0x0d, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x4f, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38,
	0x0a, 0x0d, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4f, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0d, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72,
	0x74, 0x63, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae,
	0x01, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x72, 0x74, 0x63, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x22,
	0xdc, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x57, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x64, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x64, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x64, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a,
	0x02, 0x0a, 0x10, 0x57, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x64, 0x6c, 0x65, 0x4f, 0x72, 0x4e, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x64, 0x6c, 0x65, 0x4f, 0x72, 0x4e, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x72,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d,
	0x4f, 0x66, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0xdd, 0x01, 0x0a, 0x0b,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x09,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xfd, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x22, 0xb3, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x66, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x22, 0x33,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x28, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x10, 0x02, 0x22, 0x70, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x43, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x52, 0x08, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x93, 0x04, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x0c, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4f, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x74, 0x63, 0x2e, 0x57, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x57, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x97, 0x04, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x24, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x54, 0x72, 0x69, 0x63, 0x6b,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x12, 0x31, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x4f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0a,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x57, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2a, 0x49, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x04, 0x2a, 0x2b, 0x0a, 0x0a, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x61, 0x72,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x10, 0x02, 0x2a, 0x27, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10,
	0x01, 0x2a, 0x64, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x76, 0x61, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x56, 0x6f, 0x49, 0x50, 0x10, 0x05, 0x32, 0x2f, 0x0a, 0x03, 0x52, 0x54, 0x43, 0x12, 0x28,
	0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x0c, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x78, 0x69, 0x6f, 0x6e, 0x67, 0x77, 0x75,
	0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x72, 0x74, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rtc_proto_rawDescOnce sync.Once
	file_rtc_proto_rawDescData = file_rtc_proto_rawDesc
)

func file_rtc_proto_rawDescGZIP() []byte {
	file_rtc_proto_rawDescOnce.Do(func() {
		file_rtc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rtc_proto_rawDescData)
	})
	return file_rtc_proto_rawDescData
}

var file_rtc_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_rtc_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_rtc_proto_goTypes = []interface{}{
	(Role)(0),                   // 0: rtc.Role
	(SourceType)(0),             // 1: rtc.SourceType
	(Target)(0),                 // 2: rtc.Target
	(MediaType)(0),              // 3: rtc.MediaType
	(ViewSourceReply_Result)(0), // 4: rtc.ViewSourceReply.Result
	(TrackEvent_State)(0),       // 5: rtc.TrackEvent.State
	(*RegisterRequest)(nil),     // 6: rtc.RegisterRequest
	(*RegisterReply)(nil),       // 7: rtc.RegisterReply
	(*OnLineSourceRequest)(nil), // 8: rtc.OnLineSourceRequest
	(*OnLineSources)(nil),       // 9: rtc.OnLineSources
	(*OnLineSourceReply)(nil),   // 10: rtc.OnLineSourceReply
	(*ViewSourceRequest)(nil),   // 11: rtc.ViewSourceRequest
	(*ViewSourceReply)(nil),     // 12: rtc.ViewSourceReply
	(*WantControlRequest)(nil),  // 13: rtc.WantControlRequest
	(*WantControlReply)(nil),    // 14: rtc.WantControlReply
	(*JoinRequest)(nil),         // 15: rtc.JoinRequest
	(*JoinReply)(nil),           // 16: rtc.JoinReply
	(*TrackInfo)(nil),           // 17: rtc.TrackInfo
	(*SessionDescription)(nil),  // 18: rtc.SessionDescription
	(*Trickle)(nil),             // 19: rtc.Trickle
	(*Error)(nil),               // 20: rtc.Error
	(*TrackEvent)(nil),          // 21: rtc.TrackEvent
	(*Subscription)(nil),        // 22: rtc.Subscription
	(*SubscriptionRequest)(nil), // 23: rtc.SubscriptionRequest
	(*SubscriptionReply)(nil),   // 24: rtc.SubscriptionReply
	(*UpdateTrackReply)(nil),    // 25: rtc.UpdateTrackReply
	(*ActiveSpeaker)(nil),       // 26: rtc.ActiveSpeaker
	(*AudioLevelSpeaker)(nil),   // 27: rtc.AudioLevelSpeaker
	(*Request)(nil),             // 28: rtc.Request
	(*Reply)(nil),               // 29: rtc.Reply
	nil,                         // 30: rtc.RegisterRequest.ConfigEntry
	nil,                         // 31: rtc.OnLineSourceRequest.ConfigEntry
	nil,                         // 32: rtc.ViewSourceRequest.ConfigEntry
	nil,                         // 33: rtc.WantControlRequest.ConfigEntry
	nil,                         // 34: rtc.JoinRequest.ConfigEntry
}
var file_rtc_proto_depIdxs = []int32{
	1,  // 0: rtc.RegisterRequest.sourceType:type_name -> rtc.SourceType
	30, // 1: rtc.RegisterRequest.config:type_name -> rtc.RegisterRequest.ConfigEntry
	20, // 2: rtc.RegisterReply.error:type_name -> rtc.Error
	1,  // 3: rtc.OnLineSourceRequest.sourceType:type_name -> rtc.SourceType
	31, // 4: rtc.OnLineSourceRequest.config:type_name -> rtc.OnLineSourceRequest.ConfigEntry
	9,  // 5: rtc.OnLineSourceReply.onLineSources:type_name -> rtc.OnLineSources
	20, // 6: rtc.OnLineSourceReply.error:type_name -> rtc.Error
	32, // 7: rtc.ViewSourceRequest.config:type_name -> rtc.ViewSourceRequest.ConfigEntry
	18, // 8: rtc.ViewSourceRequest.description:type_name -> rtc.SessionDescription
	20, // 9: rtc.ViewSourceReply.error:type_name -> rtc.Error
	4,  // 10: rtc.ViewSourceReply.result:type_name -> rtc.ViewSourceReply.Result
	33, // 11: rtc.WantControlRequest.config:type_name -> rtc.WantControlRequest.ConfigEntry
	20, // 12: rtc.WantControlReply.error:type_name -> rtc.Error
	34, // 13: rtc.JoinRequest.config:type_name -> rtc.JoinRequest.ConfigEntry
	18, // 14: rtc.JoinRequest.description:type_name -> rtc.SessionDescription
	20, // 15: rtc.JoinReply.error:type_name -> rtc.Error
	18, // 16: rtc.JoinReply.description:type_name -> rtc.SessionDescription
	3,  // 17: rtc.TrackInfo.type:type_name -> rtc.MediaType
	2,  // 18: rtc.SessionDescription.target:type_name -> rtc.Target
	17, // 19: rtc.SessionDescription.trackInfos:type_name -> rtc.TrackInfo
	2,  // 20: rtc.Trickle.target:type_name -> rtc.Target
	5,  // 21: rtc.TrackEvent.state:type_name -> rtc.TrackEvent.State
	17, // 22: rtc.TrackEvent.tracks:type_name -> rtc.TrackInfo
	22, // 23: rtc.SubscriptionRequest.subscriptions:type_name -> rtc.Subscription
	20, // 24: rtc.SubscriptionReply.error:type_name -> rtc.Error
	20, // 25: rtc.UpdateTrackReply.error:type_name -> rtc.Error
	27, // 26: rtc.ActiveSpeaker.speakers:type_name -> rtc.AudioLevelSpeaker
	15, // 27: rtc.Request.join:type_name -> rtc.JoinRequest
	18, // 28: rtc.Request.description:type_name -> rtc.SessionDescription
	19, // 29: rtc.Request.trickle:type_name -> rtc.Trickle
	23, // 30: rtc.Request.subscription:type_name -> rtc.SubscriptionRequest
	6,  // 31: rtc.Request.register:type_name -> rtc.RegisterRequest
	8,  // 32: rtc.Request.onLineSource:type_name -> rtc.OnLineSourceRequest
	11, // 33: rtc.Request.viewSource:type_name -> rtc.ViewSourceRequest
	13, // 34: rtc.Request.wantControl:type_name -> rtc.WantControlRequest
	14, // 35: rtc.Request.wantControlReply:type_name -> rtc.WantControlReply
	16, // 36: rtc.Reply.join:type_name -> rtc.JoinReply
	18, // 37: rtc.Reply.description:type_name -> rtc.SessionDescription
	19, // 38: rtc.Reply.trickle:type_name -> rtc.Trickle
	21, // 39: rtc.Reply.trackEvent:type_name -> rtc.TrackEvent
	24, // 40: rtc.Reply.subscription:type_name -> rtc.SubscriptionReply
	20, // 41: rtc.Reply.error:type_name -> rtc.Error
	7,  // 42: rtc.Reply.register:type_name -> rtc.RegisterReply
	10, // 43: rtc.Reply.onLineSource:type_name -> rtc.OnLineSourceReply
	12, // 44: rtc.Reply.viewSource:type_name -> rtc.ViewSourceReply
	14, // 45: rtc.Reply.wantControl:type_name -> rtc.WantControlReply
	28, // 46: rtc.RTC.Signal:input_type -> rtc.Request
	29, // 47: rtc.RTC.Signal:output_type -> rtc.Reply
	47, // [47:48] is the sub-list for method output_type
	46, // [46:47] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_rtc_proto_init() }
func file_rtc_proto_init() {
	if File_rtc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rtc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnLineSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnLineSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnLineSourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewSourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WantControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WantControlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trickle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTrackReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveSpeaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLevelSpeaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rtc_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Request_Join)(nil),
		(*Request_Description)(nil),
		(*Request_Trickle)(nil),
		(*Request_Subscription)(nil),
		(*Request_Register)(nil),
		(*Request_OnLineSource)(nil),
		(*Request_ViewSource)(nil),
		(*Request_WantControl)(nil),
		(*Request_WantControlReply)(nil),
	}
	file_rtc_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Reply_Join)(nil),
		(*Reply_Description)(nil),
		(*Reply_Trickle)(nil),
		(*Reply_TrackEvent)(nil),
		(*Reply_Subscription)(nil),
		(*Reply_Error)(nil),
		(*Reply_Register)(nil),
		(*Reply_OnLineSource)(nil),
		(*Reply_ViewSource)(nil),
		(*Reply_WantControl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rtc_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rtc_proto_goTypes,
		DependencyIndexes: file_rtc_proto_depIdxs,
		EnumInfos:         file_rtc_proto_enumTypes,
		MessageInfos:      file_rtc_proto_msgTypes,
	}.Build()
	File_rtc_proto = out.File
	file_rtc_proto_rawDesc = nil
	file_rtc_proto_goTypes = nil
	file_rtc_proto_depIdxs = nil
}
