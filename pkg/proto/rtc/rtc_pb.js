// source: rtc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.rtc.ActiveSpeaker', null, global);
goog.exportSymbol('proto.rtc.AudioLevelSpeaker', null, global);
goog.exportSymbol('proto.rtc.ConnectType', null, global);
goog.exportSymbol('proto.rtc.Error', null, global);
goog.exportSymbol('proto.rtc.JoinReply', null, global);
goog.exportSymbol('proto.rtc.JoinRequest', null, global);
goog.exportSymbol('proto.rtc.MediaType', null, global);
goog.exportSymbol('proto.rtc.OnLineSourceReply', null, global);
goog.exportSymbol('proto.rtc.OnLineSourceRequest', null, global);
goog.exportSymbol('proto.rtc.OnLineSources', null, global);
goog.exportSymbol('proto.rtc.RegisterReply', null, global);
goog.exportSymbol('proto.rtc.RegisterRequest', null, global);
goog.exportSymbol('proto.rtc.Reply', null, global);
goog.exportSymbol('proto.rtc.Reply.PayloadCase', null, global);
goog.exportSymbol('proto.rtc.Request', null, global);
goog.exportSymbol('proto.rtc.Request.PayloadCase', null, global);
goog.exportSymbol('proto.rtc.Role', null, global);
goog.exportSymbol('proto.rtc.SessionDescription', null, global);
goog.exportSymbol('proto.rtc.SourceType', null, global);
goog.exportSymbol('proto.rtc.Subscription', null, global);
goog.exportSymbol('proto.rtc.SubscriptionReply', null, global);
goog.exportSymbol('proto.rtc.SubscriptionRequest', null, global);
goog.exportSymbol('proto.rtc.Target', null, global);
goog.exportSymbol('proto.rtc.TrackEvent', null, global);
goog.exportSymbol('proto.rtc.TrackEvent.State', null, global);
goog.exportSymbol('proto.rtc.TrackInfo', null, global);
goog.exportSymbol('proto.rtc.Trickle', null, global);
goog.exportSymbol('proto.rtc.UpdateTrackReply', null, global);
goog.exportSymbol('proto.rtc.ViewSourceReply', null, global);
goog.exportSymbol('proto.rtc.ViewSourceReply.Result', null, global);
goog.exportSymbol('proto.rtc.ViewSourceRequest', null, global);
goog.exportSymbol('proto.rtc.WantConnectReply', null, global);
goog.exportSymbol('proto.rtc.WantConnectRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.RegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.RegisterRequest.displayName = 'proto.rtc.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.RegisterReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.RegisterReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.RegisterReply.displayName = 'proto.rtc.RegisterReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.OnLineSourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.OnLineSourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.OnLineSourceRequest.displayName = 'proto.rtc.OnLineSourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.OnLineSources = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.OnLineSources, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.OnLineSources.displayName = 'proto.rtc.OnLineSources';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.OnLineSourceReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.OnLineSourceReply.repeatedFields_, null);
};
goog.inherits(proto.rtc.OnLineSourceReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.OnLineSourceReply.displayName = 'proto.rtc.OnLineSourceReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.ViewSourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.ViewSourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.ViewSourceRequest.displayName = 'proto.rtc.ViewSourceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.ViewSourceReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.ViewSourceReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.ViewSourceReply.displayName = 'proto.rtc.ViewSourceReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.WantConnectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.WantConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.WantConnectRequest.displayName = 'proto.rtc.WantConnectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.WantConnectReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.WantConnectReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.WantConnectReply.displayName = 'proto.rtc.WantConnectReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.JoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.JoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.JoinRequest.displayName = 'proto.rtc.JoinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.JoinReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.JoinReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.JoinReply.displayName = 'proto.rtc.JoinReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.TrackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.TrackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.TrackInfo.displayName = 'proto.rtc.TrackInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.SessionDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.SessionDescription.repeatedFields_, null);
};
goog.inherits(proto.rtc.SessionDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.SessionDescription.displayName = 'proto.rtc.SessionDescription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Trickle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.Trickle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Trickle.displayName = 'proto.rtc.Trickle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Error.displayName = 'proto.rtc.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.TrackEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.TrackEvent.repeatedFields_, null);
};
goog.inherits(proto.rtc.TrackEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.TrackEvent.displayName = 'proto.rtc.TrackEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Subscription.displayName = 'proto.rtc.Subscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.SubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.SubscriptionRequest.repeatedFields_, null);
};
goog.inherits(proto.rtc.SubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.SubscriptionRequest.displayName = 'proto.rtc.SubscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.SubscriptionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.SubscriptionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.SubscriptionReply.displayName = 'proto.rtc.SubscriptionReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.UpdateTrackReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.UpdateTrackReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.UpdateTrackReply.displayName = 'proto.rtc.UpdateTrackReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.ActiveSpeaker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rtc.ActiveSpeaker.repeatedFields_, null);
};
goog.inherits(proto.rtc.ActiveSpeaker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.ActiveSpeaker.displayName = 'proto.rtc.ActiveSpeaker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.AudioLevelSpeaker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtc.AudioLevelSpeaker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.AudioLevelSpeaker.displayName = 'proto.rtc.AudioLevelSpeaker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rtc.Request.oneofGroups_);
};
goog.inherits(proto.rtc.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Request.displayName = 'proto.rtc.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtc.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.rtc.Reply.oneofGroups_);
};
goog.inherits(proto.rtc.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rtc.Reply.displayName = 'proto.rtc.Reply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.RegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.RegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.RegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sourcetype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.RegisterRequest}
 */
proto.rtc.RegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.RegisterRequest;
  return proto.rtc.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.RegisterRequest}
 */
proto.rtc.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {!proto.rtc.SourceType} */ (reader.readEnum());
      msg.setSourcetype(value);
      break;
    case 5:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.RegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.RegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSourcetype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.rtc.RegisterRequest.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.RegisterRequest} returns this
 */
proto.rtc.RegisterRequest.prototype.setSid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.rtc.RegisterRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.RegisterRequest} returns this
 */
proto.rtc.RegisterRequest.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.rtc.RegisterRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.RegisterRequest} returns this
 */
proto.rtc.RegisterRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SourceType sourceType = 4;
 * @return {!proto.rtc.SourceType}
 */
proto.rtc.RegisterRequest.prototype.getSourcetype = function() {
  return /** @type {!proto.rtc.SourceType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.rtc.SourceType} value
 * @return {!proto.rtc.RegisterRequest} returns this
 */
proto.rtc.RegisterRequest.prototype.setSourcetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * map<string, string> config = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rtc.RegisterRequest.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rtc.RegisterRequest} returns this
 */
proto.rtc.RegisterRequest.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.RegisterReply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.RegisterReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.RegisterReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.RegisterReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.RegisterReply}
 */
proto.rtc.RegisterReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.RegisterReply;
  return proto.rtc.RegisterReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.RegisterReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.RegisterReply}
 */
proto.rtc.RegisterReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.RegisterReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.RegisterReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.RegisterReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.RegisterReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rtc.RegisterReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.RegisterReply} returns this
 */
proto.rtc.RegisterReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.rtc.Error}
 */
proto.rtc.RegisterReply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 2));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.RegisterReply} returns this
*/
proto.rtc.RegisterReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.RegisterReply} returns this
 */
proto.rtc.RegisterReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.RegisterReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.OnLineSourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.OnLineSourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.OnLineSourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.OnLineSourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.OnLineSourceRequest}
 */
proto.rtc.OnLineSourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.OnLineSourceRequest;
  return proto.rtc.OnLineSourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.OnLineSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.OnLineSourceRequest}
 */
proto.rtc.OnLineSourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rtc.SourceType} */ (reader.readEnum());
      msg.setSourcetype(value);
      break;
    case 4:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.OnLineSourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.OnLineSourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.OnLineSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.OnLineSourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional SourceType sourceType = 1;
 * @return {!proto.rtc.SourceType}
 */
proto.rtc.OnLineSourceRequest.prototype.getSourcetype = function() {
  return /** @type {!proto.rtc.SourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rtc.SourceType} value
 * @return {!proto.rtc.OnLineSourceRequest} returns this
 */
proto.rtc.OnLineSourceRequest.prototype.setSourcetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * map<string, string> config = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rtc.OnLineSourceRequest.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rtc.OnLineSourceRequest} returns this
 */
proto.rtc.OnLineSourceRequest.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.OnLineSources.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.OnLineSources.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.OnLineSources} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.OnLineSources.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.OnLineSources}
 */
proto.rtc.OnLineSources.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.OnLineSources;
  return proto.rtc.OnLineSources.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.OnLineSources} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.OnLineSources}
 */
proto.rtc.OnLineSources.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.OnLineSources.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.OnLineSources.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.OnLineSources} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.OnLineSources.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.rtc.OnLineSources.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.OnLineSources} returns this
 */
proto.rtc.OnLineSources.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.rtc.OnLineSources.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.OnLineSources} returns this
 */
proto.rtc.OnLineSources.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.OnLineSourceReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.OnLineSourceReply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.OnLineSourceReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.OnLineSourceReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.OnLineSourceReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    onlinesourcesList: jspb.Message.toObjectList(msg.getOnlinesourcesList(),
    proto.rtc.OnLineSources.toObject, includeInstance),
    success: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.OnLineSourceReply}
 */
proto.rtc.OnLineSourceReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.OnLineSourceReply;
  return proto.rtc.OnLineSourceReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.OnLineSourceReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.OnLineSourceReply}
 */
proto.rtc.OnLineSourceReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rtc.OnLineSources;
      reader.readMessage(value,proto.rtc.OnLineSources.deserializeBinaryFromReader);
      msg.addOnlinesources(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.OnLineSourceReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.OnLineSourceReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.OnLineSourceReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.OnLineSourceReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnlinesourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rtc.OnLineSources.serializeBinaryToWriter
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated OnLineSources onLineSources = 1;
 * @return {!Array<!proto.rtc.OnLineSources>}
 */
proto.rtc.OnLineSourceReply.prototype.getOnlinesourcesList = function() {
  return /** @type{!Array<!proto.rtc.OnLineSources>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rtc.OnLineSources, 1));
};


/**
 * @param {!Array<!proto.rtc.OnLineSources>} value
 * @return {!proto.rtc.OnLineSourceReply} returns this
*/
proto.rtc.OnLineSourceReply.prototype.setOnlinesourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rtc.OnLineSources=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rtc.OnLineSources}
 */
proto.rtc.OnLineSourceReply.prototype.addOnlinesources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rtc.OnLineSources, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.OnLineSourceReply} returns this
 */
proto.rtc.OnLineSourceReply.prototype.clearOnlinesourcesList = function() {
  return this.setOnlinesourcesList([]);
};


/**
 * optional bool success = 2;
 * @return {boolean}
 */
proto.rtc.OnLineSourceReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.OnLineSourceReply} returns this
 */
proto.rtc.OnLineSourceReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Error error = 3;
 * @return {?proto.rtc.Error}
 */
proto.rtc.OnLineSourceReply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 3));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.OnLineSourceReply} returns this
*/
proto.rtc.OnLineSourceReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.OnLineSourceReply} returns this
 */
proto.rtc.OnLineSourceReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.OnLineSourceReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.ViewSourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.ViewSourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.ViewSourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.ViewSourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : [],
    description: (f = msg.getDescription()) && proto.rtc.SessionDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.ViewSourceRequest}
 */
proto.rtc.ViewSourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.ViewSourceRequest;
  return proto.rtc.ViewSourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.ViewSourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.ViewSourceRequest}
 */
proto.rtc.ViewSourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = new proto.rtc.SessionDescription;
      reader.readMessage(value,proto.rtc.SessionDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.ViewSourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.ViewSourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.ViewSourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.ViewSourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rtc.SessionDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.rtc.ViewSourceRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.ViewSourceRequest} returns this
 */
proto.rtc.ViewSourceRequest.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> config = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rtc.ViewSourceRequest.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rtc.ViewSourceRequest} returns this
 */
proto.rtc.ViewSourceRequest.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;};


/**
 * optional SessionDescription description = 4;
 * @return {?proto.rtc.SessionDescription}
 */
proto.rtc.ViewSourceRequest.prototype.getDescription = function() {
  return /** @type{?proto.rtc.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SessionDescription, 4));
};


/**
 * @param {?proto.rtc.SessionDescription|undefined} value
 * @return {!proto.rtc.ViewSourceRequest} returns this
*/
proto.rtc.ViewSourceRequest.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.ViewSourceRequest} returns this
 */
proto.rtc.ViewSourceRequest.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.ViewSourceRequest.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.ViewSourceReply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.ViewSourceReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.ViewSourceReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.ViewSourceReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.ViewSourceReply}
 */
proto.rtc.ViewSourceReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.ViewSourceReply;
  return proto.rtc.ViewSourceReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.ViewSourceReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.ViewSourceReply}
 */
proto.rtc.ViewSourceReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {!proto.rtc.ViewSourceReply.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.ViewSourceReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.ViewSourceReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.ViewSourceReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.ViewSourceReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.rtc.ViewSourceReply.Result = {
  WEBRTC: 0,
  CLOUD: 1,
  ERROR: 2
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rtc.ViewSourceReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.ViewSourceReply} returns this
 */
proto.rtc.ViewSourceReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.rtc.Error}
 */
proto.rtc.ViewSourceReply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 2));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.ViewSourceReply} returns this
*/
proto.rtc.ViewSourceReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.ViewSourceReply} returns this
 */
proto.rtc.ViewSourceReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.ViewSourceReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Result result = 3;
 * @return {!proto.rtc.ViewSourceReply.Result}
 */
proto.rtc.ViewSourceReply.prototype.getResult = function() {
  return /** @type {!proto.rtc.ViewSourceReply.Result} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rtc.ViewSourceReply.Result} value
 * @return {!proto.rtc.ViewSourceReply} returns this
 */
proto.rtc.ViewSourceReply.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.WantConnectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.WantConnectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.WantConnectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.WantConnectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : [],
    sdptype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sdp: jspb.Message.getFieldWithDefault(msg, 5, ""),
    connectiontype: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.WantConnectRequest}
 */
proto.rtc.WantConnectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.WantConnectRequest;
  return proto.rtc.WantConnectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.WantConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.WantConnectRequest}
 */
proto.rtc.WantConnectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdptype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 6:
      var value = /** @type {!proto.rtc.ConnectType} */ (reader.readEnum());
      msg.setConnectiontype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.WantConnectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.WantConnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.WantConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.WantConnectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSdptype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getConnectiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rtc.WantConnectRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.WantConnectRequest} returns this
 */
proto.rtc.WantConnectRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.rtc.WantConnectRequest.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.WantConnectRequest} returns this
 */
proto.rtc.WantConnectRequest.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> config = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rtc.WantConnectRequest.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rtc.WantConnectRequest} returns this
 */
proto.rtc.WantConnectRequest.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;};


/**
 * optional string sdpType = 4;
 * @return {string}
 */
proto.rtc.WantConnectRequest.prototype.getSdptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.WantConnectRequest} returns this
 */
proto.rtc.WantConnectRequest.prototype.setSdptype = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sdp = 5;
 * @return {string}
 */
proto.rtc.WantConnectRequest.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.WantConnectRequest} returns this
 */
proto.rtc.WantConnectRequest.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ConnectType connectionType = 6;
 * @return {!proto.rtc.ConnectType}
 */
proto.rtc.WantConnectRequest.prototype.getConnectiontype = function() {
  return /** @type {!proto.rtc.ConnectType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.rtc.ConnectType} value
 * @return {!proto.rtc.WantConnectRequest} returns this
 */
proto.rtc.WantConnectRequest.prototype.setConnectiontype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.WantConnectReply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.WantConnectReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.WantConnectReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.WantConnectReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    idleornot: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    resttimesecs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numofwaiting: jspb.Message.getFieldWithDefault(msg, 4, 0),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f),
    from: jspb.Message.getFieldWithDefault(msg, 6, ""),
    to: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sdptype: jspb.Message.getFieldWithDefault(msg, 8, ""),
    sdp: jspb.Message.getFieldWithDefault(msg, 9, ""),
    connectiontype: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.WantConnectReply}
 */
proto.rtc.WantConnectReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.WantConnectReply;
  return proto.rtc.WantConnectReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.WantConnectReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.WantConnectReply}
 */
proto.rtc.WantConnectReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdleornot(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResttimesecs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumofwaiting(value);
      break;
    case 5:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdptype(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 10:
      var value = /** @type {!proto.rtc.ConnectType} */ (reader.readEnum());
      msg.setConnectiontype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.WantConnectReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.WantConnectReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.WantConnectReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.WantConnectReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIdleornot();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getResttimesecs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getNumofwaiting();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSdptype();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getConnectiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rtc.WantConnectReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool idleOrNot = 2;
 * @return {boolean}
 */
proto.rtc.WantConnectReply.prototype.getIdleornot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setIdleornot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 restTimeSecs = 3;
 * @return {number}
 */
proto.rtc.WantConnectReply.prototype.getResttimesecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setResttimesecs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 numOfWaiting = 4;
 * @return {number}
 */
proto.rtc.WantConnectReply.prototype.getNumofwaiting = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setNumofwaiting = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Error error = 5;
 * @return {?proto.rtc.Error}
 */
proto.rtc.WantConnectReply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 5));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.WantConnectReply} returns this
*/
proto.rtc.WantConnectReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.WantConnectReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string from = 6;
 * @return {string}
 */
proto.rtc.WantConnectReply.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string to = 7;
 * @return {string}
 */
proto.rtc.WantConnectReply.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sdpType = 8;
 * @return {string}
 */
proto.rtc.WantConnectReply.prototype.getSdptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setSdptype = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string sdp = 9;
 * @return {string}
 */
proto.rtc.WantConnectReply.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional ConnectType connectionType = 10;
 * @return {!proto.rtc.ConnectType}
 */
proto.rtc.WantConnectReply.prototype.getConnectiontype = function() {
  return /** @type {!proto.rtc.ConnectType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.rtc.ConnectType} value
 * @return {!proto.rtc.WantConnectReply} returns this
 */
proto.rtc.WantConnectReply.prototype.setConnectiontype = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.JoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.JoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.JoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.JoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configMap: (f = msg.getConfigMap()) ? f.toObject(includeInstance, undefined) : [],
    description: (f = msg.getDescription()) && proto.rtc.SessionDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.JoinRequest}
 */
proto.rtc.JoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.JoinRequest;
  return proto.rtc.JoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.JoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.JoinRequest}
 */
proto.rtc.JoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = msg.getConfigMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = new proto.rtc.SessionDescription;
      reader.readMessage(value,proto.rtc.SessionDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.JoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.JoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.JoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.JoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rtc.SessionDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.rtc.JoinRequest.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.JoinRequest} returns this
 */
proto.rtc.JoinRequest.prototype.setSid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.rtc.JoinRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.JoinRequest} returns this
 */
proto.rtc.JoinRequest.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> config = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.rtc.JoinRequest.prototype.getConfigMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.rtc.JoinRequest} returns this
 */
proto.rtc.JoinRequest.prototype.clearConfigMap = function() {
  this.getConfigMap().clear();
  return this;};


/**
 * optional SessionDescription description = 4;
 * @return {?proto.rtc.SessionDescription}
 */
proto.rtc.JoinRequest.prototype.getDescription = function() {
  return /** @type{?proto.rtc.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SessionDescription, 4));
};


/**
 * @param {?proto.rtc.SessionDescription|undefined} value
 * @return {!proto.rtc.JoinRequest} returns this
*/
proto.rtc.JoinRequest.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.JoinRequest} returns this
 */
proto.rtc.JoinRequest.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.JoinRequest.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.JoinReply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.JoinReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.JoinReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.JoinReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && proto.rtc.SessionDescription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.JoinReply}
 */
proto.rtc.JoinReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.JoinReply;
  return proto.rtc.JoinReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.JoinReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.JoinReply}
 */
proto.rtc.JoinReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.rtc.SessionDescription;
      reader.readMessage(value,proto.rtc.SessionDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.JoinReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.JoinReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.JoinReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.JoinReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rtc.SessionDescription.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rtc.JoinReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.JoinReply} returns this
 */
proto.rtc.JoinReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.rtc.Error}
 */
proto.rtc.JoinReply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 2));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.JoinReply} returns this
*/
proto.rtc.JoinReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.JoinReply} returns this
 */
proto.rtc.JoinReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.JoinReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SessionDescription description = 3;
 * @return {?proto.rtc.SessionDescription}
 */
proto.rtc.JoinReply.prototype.getDescription = function() {
  return /** @type{?proto.rtc.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SessionDescription, 3));
};


/**
 * @param {?proto.rtc.SessionDescription|undefined} value
 * @return {!proto.rtc.JoinReply} returns this
*/
proto.rtc.JoinReply.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.JoinReply} returns this
 */
proto.rtc.JoinReply.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.JoinReply.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.TrackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.TrackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.TrackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.TrackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    kind: jspb.Message.getFieldWithDefault(msg, 2, ""),
    muted: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0),
    streamid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    label: jspb.Message.getFieldWithDefault(msg, 6, ""),
    layer: jspb.Message.getFieldWithDefault(msg, 7, ""),
    width: jspb.Message.getFieldWithDefault(msg, 8, 0),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0),
    framerate: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.TrackInfo}
 */
proto.rtc.TrackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.TrackInfo;
  return proto.rtc.TrackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.TrackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.TrackInfo}
 */
proto.rtc.TrackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMuted(value);
      break;
    case 4:
      var value = /** @type {!proto.rtc.MediaType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayer(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFramerate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.TrackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.TrackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.TrackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.TrackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMuted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getStreamid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLayer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getFramerate();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.rtc.TrackInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string kind = 2;
 * @return {string}
 */
proto.rtc.TrackInfo.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool muted = 3;
 * @return {boolean}
 */
proto.rtc.TrackInfo.prototype.getMuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setMuted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional MediaType type = 4;
 * @return {!proto.rtc.MediaType}
 */
proto.rtc.TrackInfo.prototype.getType = function() {
  return /** @type {!proto.rtc.MediaType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.rtc.MediaType} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string streamId = 5;
 * @return {string}
 */
proto.rtc.TrackInfo.prototype.getStreamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setStreamid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string label = 6;
 * @return {string}
 */
proto.rtc.TrackInfo.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string layer = 7;
 * @return {string}
 */
proto.rtc.TrackInfo.prototype.getLayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setLayer = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint32 width = 8;
 * @return {number}
 */
proto.rtc.TrackInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 height = 9;
 * @return {number}
 */
proto.rtc.TrackInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 frameRate = 10;
 * @return {number}
 */
proto.rtc.TrackInfo.prototype.getFramerate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.TrackInfo} returns this
 */
proto.rtc.TrackInfo.prototype.setFramerate = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.SessionDescription.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.SessionDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.SessionDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.SessionDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SessionDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    target: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sdp: jspb.Message.getFieldWithDefault(msg, 5, ""),
    trackinfosList: jspb.Message.toObjectList(msg.getTrackinfosList(),
    proto.rtc.TrackInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.SessionDescription}
 */
proto.rtc.SessionDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.SessionDescription;
  return proto.rtc.SessionDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.SessionDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.SessionDescription}
 */
proto.rtc.SessionDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {!proto.rtc.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 6:
      var value = new proto.rtc.TrackInfo;
      reader.readMessage(value,proto.rtc.TrackInfo.deserializeBinaryFromReader);
      msg.addTrackinfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.SessionDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.SessionDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.SessionDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SessionDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTrackinfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.rtc.TrackInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rtc.SessionDescription.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.rtc.SessionDescription.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Target target = 3;
 * @return {!proto.rtc.Target}
 */
proto.rtc.SessionDescription.prototype.getTarget = function() {
  return /** @type {!proto.rtc.Target} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rtc.Target} value
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.rtc.SessionDescription.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sdp = 5;
 * @return {string}
 */
proto.rtc.SessionDescription.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated TrackInfo trackInfos = 6;
 * @return {!Array<!proto.rtc.TrackInfo>}
 */
proto.rtc.SessionDescription.prototype.getTrackinfosList = function() {
  return /** @type{!Array<!proto.rtc.TrackInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rtc.TrackInfo, 6));
};


/**
 * @param {!Array<!proto.rtc.TrackInfo>} value
 * @return {!proto.rtc.SessionDescription} returns this
*/
proto.rtc.SessionDescription.prototype.setTrackinfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.rtc.TrackInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rtc.TrackInfo}
 */
proto.rtc.SessionDescription.prototype.addTrackinfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.rtc.TrackInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.SessionDescription} returns this
 */
proto.rtc.SessionDescription.prototype.clearTrackinfosList = function() {
  return this.setTrackinfosList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Trickle.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Trickle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Trickle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Trickle.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    target: jspb.Message.getFieldWithDefault(msg, 3, 0),
    init: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Trickle}
 */
proto.rtc.Trickle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Trickle;
  return proto.rtc.Trickle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Trickle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Trickle}
 */
proto.rtc.Trickle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {!proto.rtc.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Trickle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Trickle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Trickle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Trickle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getInit();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.rtc.Trickle.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Trickle} returns this
 */
proto.rtc.Trickle.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.rtc.Trickle.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Trickle} returns this
 */
proto.rtc.Trickle.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Target target = 3;
 * @return {!proto.rtc.Target}
 */
proto.rtc.Trickle.prototype.getTarget = function() {
  return /** @type {!proto.rtc.Target} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.rtc.Target} value
 * @return {!proto.rtc.Trickle} returns this
 */
proto.rtc.Trickle.prototype.setTarget = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string init = 4;
 * @return {string}
 */
proto.rtc.Trickle.prototype.getInit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Trickle} returns this
 */
proto.rtc.Trickle.prototype.setInit = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Error}
 */
proto.rtc.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Error;
  return proto.rtc.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Error}
 */
proto.rtc.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.rtc.Error.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.Error} returns this
 */
proto.rtc.Error.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.rtc.Error.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Error} returns this
 */
proto.rtc.Error.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.TrackEvent.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.TrackEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.TrackEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.TrackEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.TrackEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tracksList: jspb.Message.toObjectList(msg.getTracksList(),
    proto.rtc.TrackInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.TrackEvent}
 */
proto.rtc.TrackEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.TrackEvent;
  return proto.rtc.TrackEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.TrackEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.TrackEvent}
 */
proto.rtc.TrackEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rtc.TrackEvent.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = new proto.rtc.TrackInfo;
      reader.readMessage(value,proto.rtc.TrackInfo.deserializeBinaryFromReader);
      msg.addTracks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.TrackEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.TrackEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.TrackEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.TrackEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rtc.TrackInfo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rtc.TrackEvent.State = {
  ADD: 0,
  UPDATE: 1,
  REMOVE: 2
};

/**
 * optional State state = 1;
 * @return {!proto.rtc.TrackEvent.State}
 */
proto.rtc.TrackEvent.prototype.getState = function() {
  return /** @type {!proto.rtc.TrackEvent.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rtc.TrackEvent.State} value
 * @return {!proto.rtc.TrackEvent} returns this
 */
proto.rtc.TrackEvent.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.rtc.TrackEvent.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.TrackEvent} returns this
 */
proto.rtc.TrackEvent.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TrackInfo tracks = 3;
 * @return {!Array<!proto.rtc.TrackInfo>}
 */
proto.rtc.TrackEvent.prototype.getTracksList = function() {
  return /** @type{!Array<!proto.rtc.TrackInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rtc.TrackInfo, 3));
};


/**
 * @param {!Array<!proto.rtc.TrackInfo>} value
 * @return {!proto.rtc.TrackEvent} returns this
*/
proto.rtc.TrackEvent.prototype.setTracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rtc.TrackInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rtc.TrackInfo}
 */
proto.rtc.TrackEvent.prototype.addTracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rtc.TrackInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.TrackEvent} returns this
 */
proto.rtc.TrackEvent.prototype.clearTracksList = function() {
  return this.setTracksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Subscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    trackid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mute: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    subscribe: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    layer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Subscription}
 */
proto.rtc.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Subscription;
  return proto.rtc.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Subscription}
 */
proto.rtc.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMute(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSubscribe(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrackid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMute();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getSubscribe();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getLayer();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string trackId = 2;
 * @return {string}
 */
proto.rtc.Subscription.prototype.getTrackid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Subscription} returns this
 */
proto.rtc.Subscription.prototype.setTrackid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool mute = 3;
 * @return {boolean}
 */
proto.rtc.Subscription.prototype.getMute = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.Subscription} returns this
 */
proto.rtc.Subscription.prototype.setMute = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool subscribe = 4;
 * @return {boolean}
 */
proto.rtc.Subscription.prototype.getSubscribe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.Subscription} returns this
 */
proto.rtc.Subscription.prototype.setSubscribe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string layer = 5;
 * @return {string}
 */
proto.rtc.Subscription.prototype.getLayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.Subscription} returns this
 */
proto.rtc.Subscription.prototype.setLayer = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.SubscriptionRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.SubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.SubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.SubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(),
    proto.rtc.Subscription.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.SubscriptionRequest}
 */
proto.rtc.SubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.SubscriptionRequest;
  return proto.rtc.SubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.SubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.SubscriptionRequest}
 */
proto.rtc.SubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rtc.Subscription;
      reader.readMessage(value,proto.rtc.Subscription.deserializeBinaryFromReader);
      msg.addSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.SubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.SubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.SubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rtc.Subscription.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Subscription subscriptions = 1;
 * @return {!Array<!proto.rtc.Subscription>}
 */
proto.rtc.SubscriptionRequest.prototype.getSubscriptionsList = function() {
  return /** @type{!Array<!proto.rtc.Subscription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rtc.Subscription, 1));
};


/**
 * @param {!Array<!proto.rtc.Subscription>} value
 * @return {!proto.rtc.SubscriptionRequest} returns this
*/
proto.rtc.SubscriptionRequest.prototype.setSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rtc.Subscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rtc.Subscription}
 */
proto.rtc.SubscriptionRequest.prototype.addSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rtc.Subscription, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.SubscriptionRequest} returns this
 */
proto.rtc.SubscriptionRequest.prototype.clearSubscriptionsList = function() {
  return this.setSubscriptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.SubscriptionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.SubscriptionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.SubscriptionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SubscriptionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.SubscriptionReply}
 */
proto.rtc.SubscriptionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.SubscriptionReply;
  return proto.rtc.SubscriptionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.SubscriptionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.SubscriptionReply}
 */
proto.rtc.SubscriptionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.SubscriptionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.SubscriptionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.SubscriptionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.SubscriptionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rtc.SubscriptionReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.SubscriptionReply} returns this
 */
proto.rtc.SubscriptionReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.rtc.Error}
 */
proto.rtc.SubscriptionReply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 2));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.SubscriptionReply} returns this
*/
proto.rtc.SubscriptionReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.SubscriptionReply} returns this
 */
proto.rtc.SubscriptionReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.SubscriptionReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.UpdateTrackReply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.UpdateTrackReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.UpdateTrackReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.UpdateTrackReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.UpdateTrackReply}
 */
proto.rtc.UpdateTrackReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.UpdateTrackReply;
  return proto.rtc.UpdateTrackReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.UpdateTrackReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.UpdateTrackReply}
 */
proto.rtc.UpdateTrackReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.UpdateTrackReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.UpdateTrackReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.UpdateTrackReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.UpdateTrackReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.rtc.UpdateTrackReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.UpdateTrackReply} returns this
 */
proto.rtc.UpdateTrackReply.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.rtc.Error}
 */
proto.rtc.UpdateTrackReply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 2));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.UpdateTrackReply} returns this
*/
proto.rtc.UpdateTrackReply.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.UpdateTrackReply} returns this
 */
proto.rtc.UpdateTrackReply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.UpdateTrackReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rtc.ActiveSpeaker.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.ActiveSpeaker.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.ActiveSpeaker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.ActiveSpeaker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.ActiveSpeaker.toObject = function(includeInstance, msg) {
  var f, obj = {
    speakersList: jspb.Message.toObjectList(msg.getSpeakersList(),
    proto.rtc.AudioLevelSpeaker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.ActiveSpeaker}
 */
proto.rtc.ActiveSpeaker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.ActiveSpeaker;
  return proto.rtc.ActiveSpeaker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.ActiveSpeaker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.ActiveSpeaker}
 */
proto.rtc.ActiveSpeaker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rtc.AudioLevelSpeaker;
      reader.readMessage(value,proto.rtc.AudioLevelSpeaker.deserializeBinaryFromReader);
      msg.addSpeakers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.ActiveSpeaker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.ActiveSpeaker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.ActiveSpeaker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.ActiveSpeaker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeakersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rtc.AudioLevelSpeaker.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AudioLevelSpeaker speakers = 1;
 * @return {!Array<!proto.rtc.AudioLevelSpeaker>}
 */
proto.rtc.ActiveSpeaker.prototype.getSpeakersList = function() {
  return /** @type{!Array<!proto.rtc.AudioLevelSpeaker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rtc.AudioLevelSpeaker, 1));
};


/**
 * @param {!Array<!proto.rtc.AudioLevelSpeaker>} value
 * @return {!proto.rtc.ActiveSpeaker} returns this
*/
proto.rtc.ActiveSpeaker.prototype.setSpeakersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rtc.AudioLevelSpeaker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rtc.AudioLevelSpeaker}
 */
proto.rtc.ActiveSpeaker.prototype.addSpeakers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rtc.AudioLevelSpeaker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rtc.ActiveSpeaker} returns this
 */
proto.rtc.ActiveSpeaker.prototype.clearSpeakersList = function() {
  return this.setSpeakersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.AudioLevelSpeaker.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.AudioLevelSpeaker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.AudioLevelSpeaker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.AudioLevelSpeaker.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.AudioLevelSpeaker}
 */
proto.rtc.AudioLevelSpeaker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.AudioLevelSpeaker;
  return proto.rtc.AudioLevelSpeaker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.AudioLevelSpeaker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.AudioLevelSpeaker}
 */
proto.rtc.AudioLevelSpeaker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.AudioLevelSpeaker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.AudioLevelSpeaker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.AudioLevelSpeaker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.AudioLevelSpeaker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.rtc.AudioLevelSpeaker.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rtc.AudioLevelSpeaker} returns this
 */
proto.rtc.AudioLevelSpeaker.prototype.setSid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float level = 2;
 * @return {number}
 */
proto.rtc.AudioLevelSpeaker.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.rtc.AudioLevelSpeaker} returns this
 */
proto.rtc.AudioLevelSpeaker.prototype.setLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bool active = 3;
 * @return {boolean}
 */
proto.rtc.AudioLevelSpeaker.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.rtc.AudioLevelSpeaker} returns this
 */
proto.rtc.AudioLevelSpeaker.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rtc.Request.oneofGroups_ = [[1,2,3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.rtc.Request.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JOIN: 1,
  DESCRIPTION: 2,
  TRICKLE: 3,
  SUBSCRIPTION: 4,
  REGISTER: 5,
  ONLINESOURCE: 6,
  VIEWSOURCE: 7,
  WANTCONNECT: 8,
  WANTCONNECTREPLY: 9
};

/**
 * @return {proto.rtc.Request.PayloadCase}
 */
proto.rtc.Request.prototype.getPayloadCase = function() {
  return /** @type {proto.rtc.Request.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.rtc.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    join: (f = msg.getJoin()) && proto.rtc.JoinRequest.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && proto.rtc.SessionDescription.toObject(includeInstance, f),
    trickle: (f = msg.getTrickle()) && proto.rtc.Trickle.toObject(includeInstance, f),
    subscription: (f = msg.getSubscription()) && proto.rtc.SubscriptionRequest.toObject(includeInstance, f),
    register: (f = msg.getRegister()) && proto.rtc.RegisterRequest.toObject(includeInstance, f),
    onlinesource: (f = msg.getOnlinesource()) && proto.rtc.OnLineSourceRequest.toObject(includeInstance, f),
    viewsource: (f = msg.getViewsource()) && proto.rtc.ViewSourceRequest.toObject(includeInstance, f),
    wantconnect: (f = msg.getWantconnect()) && proto.rtc.WantConnectRequest.toObject(includeInstance, f),
    wantconnectreply: (f = msg.getWantconnectreply()) && proto.rtc.WantConnectReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Request}
 */
proto.rtc.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Request;
  return proto.rtc.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Request}
 */
proto.rtc.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rtc.JoinRequest;
      reader.readMessage(value,proto.rtc.JoinRequest.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 2:
      var value = new proto.rtc.SessionDescription;
      reader.readMessage(value,proto.rtc.SessionDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.rtc.Trickle;
      reader.readMessage(value,proto.rtc.Trickle.deserializeBinaryFromReader);
      msg.setTrickle(value);
      break;
    case 4:
      var value = new proto.rtc.SubscriptionRequest;
      reader.readMessage(value,proto.rtc.SubscriptionRequest.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    case 5:
      var value = new proto.rtc.RegisterRequest;
      reader.readMessage(value,proto.rtc.RegisterRequest.deserializeBinaryFromReader);
      msg.setRegister(value);
      break;
    case 6:
      var value = new proto.rtc.OnLineSourceRequest;
      reader.readMessage(value,proto.rtc.OnLineSourceRequest.deserializeBinaryFromReader);
      msg.setOnlinesource(value);
      break;
    case 7:
      var value = new proto.rtc.ViewSourceRequest;
      reader.readMessage(value,proto.rtc.ViewSourceRequest.deserializeBinaryFromReader);
      msg.setViewsource(value);
      break;
    case 8:
      var value = new proto.rtc.WantConnectRequest;
      reader.readMessage(value,proto.rtc.WantConnectRequest.deserializeBinaryFromReader);
      msg.setWantconnect(value);
      break;
    case 9:
      var value = new proto.rtc.WantConnectReply;
      reader.readMessage(value,proto.rtc.WantConnectReply.deserializeBinaryFromReader);
      msg.setWantconnectreply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rtc.JoinRequest.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.SessionDescription.serializeBinaryToWriter
    );
  }
  f = message.getTrickle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rtc.Trickle.serializeBinaryToWriter
    );
  }
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rtc.SubscriptionRequest.serializeBinaryToWriter
    );
  }
  f = message.getRegister();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rtc.RegisterRequest.serializeBinaryToWriter
    );
  }
  f = message.getOnlinesource();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.rtc.OnLineSourceRequest.serializeBinaryToWriter
    );
  }
  f = message.getViewsource();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rtc.ViewSourceRequest.serializeBinaryToWriter
    );
  }
  f = message.getWantconnect();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rtc.WantConnectRequest.serializeBinaryToWriter
    );
  }
  f = message.getWantconnectreply();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rtc.WantConnectReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional JoinRequest join = 1;
 * @return {?proto.rtc.JoinRequest}
 */
proto.rtc.Request.prototype.getJoin = function() {
  return /** @type{?proto.rtc.JoinRequest} */ (
    jspb.Message.getWrapperField(this, proto.rtc.JoinRequest, 1));
};


/**
 * @param {?proto.rtc.JoinRequest|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setJoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearJoin = function() {
  return this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SessionDescription description = 2;
 * @return {?proto.rtc.SessionDescription}
 */
proto.rtc.Request.prototype.getDescription = function() {
  return /** @type{?proto.rtc.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SessionDescription, 2));
};


/**
 * @param {?proto.rtc.SessionDescription|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setDescription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Trickle trickle = 3;
 * @return {?proto.rtc.Trickle}
 */
proto.rtc.Request.prototype.getTrickle = function() {
  return /** @type{?proto.rtc.Trickle} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Trickle, 3));
};


/**
 * @param {?proto.rtc.Trickle|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setTrickle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearTrickle = function() {
  return this.setTrickle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasTrickle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SubscriptionRequest subscription = 4;
 * @return {?proto.rtc.SubscriptionRequest}
 */
proto.rtc.Request.prototype.getSubscription = function() {
  return /** @type{?proto.rtc.SubscriptionRequest} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SubscriptionRequest, 4));
};


/**
 * @param {?proto.rtc.SubscriptionRequest|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setSubscription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearSubscription = function() {
  return this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RegisterRequest register = 5;
 * @return {?proto.rtc.RegisterRequest}
 */
proto.rtc.Request.prototype.getRegister = function() {
  return /** @type{?proto.rtc.RegisterRequest} */ (
    jspb.Message.getWrapperField(this, proto.rtc.RegisterRequest, 5));
};


/**
 * @param {?proto.rtc.RegisterRequest|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setRegister = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearRegister = function() {
  return this.setRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasRegister = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OnLineSourceRequest onLineSource = 6;
 * @return {?proto.rtc.OnLineSourceRequest}
 */
proto.rtc.Request.prototype.getOnlinesource = function() {
  return /** @type{?proto.rtc.OnLineSourceRequest} */ (
    jspb.Message.getWrapperField(this, proto.rtc.OnLineSourceRequest, 6));
};


/**
 * @param {?proto.rtc.OnLineSourceRequest|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setOnlinesource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearOnlinesource = function() {
  return this.setOnlinesource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasOnlinesource = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ViewSourceRequest viewSource = 7;
 * @return {?proto.rtc.ViewSourceRequest}
 */
proto.rtc.Request.prototype.getViewsource = function() {
  return /** @type{?proto.rtc.ViewSourceRequest} */ (
    jspb.Message.getWrapperField(this, proto.rtc.ViewSourceRequest, 7));
};


/**
 * @param {?proto.rtc.ViewSourceRequest|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setViewsource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearViewsource = function() {
  return this.setViewsource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasViewsource = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional WantConnectRequest wantConnect = 8;
 * @return {?proto.rtc.WantConnectRequest}
 */
proto.rtc.Request.prototype.getWantconnect = function() {
  return /** @type{?proto.rtc.WantConnectRequest} */ (
    jspb.Message.getWrapperField(this, proto.rtc.WantConnectRequest, 8));
};


/**
 * @param {?proto.rtc.WantConnectRequest|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setWantconnect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearWantconnect = function() {
  return this.setWantconnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasWantconnect = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional WantConnectReply wantConnectReply = 9;
 * @return {?proto.rtc.WantConnectReply}
 */
proto.rtc.Request.prototype.getWantconnectreply = function() {
  return /** @type{?proto.rtc.WantConnectReply} */ (
    jspb.Message.getWrapperField(this, proto.rtc.WantConnectReply, 9));
};


/**
 * @param {?proto.rtc.WantConnectReply|undefined} value
 * @return {!proto.rtc.Request} returns this
*/
proto.rtc.Request.prototype.setWantconnectreply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rtc.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Request} returns this
 */
proto.rtc.Request.prototype.clearWantconnectreply = function() {
  return this.setWantconnectreply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Request.prototype.hasWantconnectreply = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.rtc.Reply.oneofGroups_ = [[1,2,3,4,5,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.rtc.Reply.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JOIN: 1,
  DESCRIPTION: 2,
  TRICKLE: 3,
  TRACKEVENT: 4,
  SUBSCRIPTION: 5,
  ERROR: 7,
  REGISTER: 8,
  ONLINESOURCE: 9,
  VIEWSOURCE: 10,
  WANTCONNECT: 11
};

/**
 * @return {proto.rtc.Reply.PayloadCase}
 */
proto.rtc.Reply.prototype.getPayloadCase = function() {
  return /** @type {proto.rtc.Reply.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.rtc.Reply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtc.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.rtc.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtc.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    join: (f = msg.getJoin()) && proto.rtc.JoinReply.toObject(includeInstance, f),
    description: (f = msg.getDescription()) && proto.rtc.SessionDescription.toObject(includeInstance, f),
    trickle: (f = msg.getTrickle()) && proto.rtc.Trickle.toObject(includeInstance, f),
    trackevent: (f = msg.getTrackevent()) && proto.rtc.TrackEvent.toObject(includeInstance, f),
    subscription: (f = msg.getSubscription()) && proto.rtc.SubscriptionReply.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.rtc.Error.toObject(includeInstance, f),
    register: (f = msg.getRegister()) && proto.rtc.RegisterReply.toObject(includeInstance, f),
    onlinesource: (f = msg.getOnlinesource()) && proto.rtc.OnLineSourceReply.toObject(includeInstance, f),
    viewsource: (f = msg.getViewsource()) && proto.rtc.ViewSourceReply.toObject(includeInstance, f),
    wantconnect: (f = msg.getWantconnect()) && proto.rtc.WantConnectReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtc.Reply}
 */
proto.rtc.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtc.Reply;
  return proto.rtc.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtc.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtc.Reply}
 */
proto.rtc.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rtc.JoinReply;
      reader.readMessage(value,proto.rtc.JoinReply.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 2:
      var value = new proto.rtc.SessionDescription;
      reader.readMessage(value,proto.rtc.SessionDescription.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.rtc.Trickle;
      reader.readMessage(value,proto.rtc.Trickle.deserializeBinaryFromReader);
      msg.setTrickle(value);
      break;
    case 4:
      var value = new proto.rtc.TrackEvent;
      reader.readMessage(value,proto.rtc.TrackEvent.deserializeBinaryFromReader);
      msg.setTrackevent(value);
      break;
    case 5:
      var value = new proto.rtc.SubscriptionReply;
      reader.readMessage(value,proto.rtc.SubscriptionReply.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    case 7:
      var value = new proto.rtc.Error;
      reader.readMessage(value,proto.rtc.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 8:
      var value = new proto.rtc.RegisterReply;
      reader.readMessage(value,proto.rtc.RegisterReply.deserializeBinaryFromReader);
      msg.setRegister(value);
      break;
    case 9:
      var value = new proto.rtc.OnLineSourceReply;
      reader.readMessage(value,proto.rtc.OnLineSourceReply.deserializeBinaryFromReader);
      msg.setOnlinesource(value);
      break;
    case 10:
      var value = new proto.rtc.ViewSourceReply;
      reader.readMessage(value,proto.rtc.ViewSourceReply.deserializeBinaryFromReader);
      msg.setViewsource(value);
      break;
    case 11:
      var value = new proto.rtc.WantConnectReply;
      reader.readMessage(value,proto.rtc.WantConnectReply.deserializeBinaryFromReader);
      msg.setWantconnect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtc.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtc.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtc.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtc.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.rtc.JoinReply.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.rtc.SessionDescription.serializeBinaryToWriter
    );
  }
  f = message.getTrickle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.rtc.Trickle.serializeBinaryToWriter
    );
  }
  f = message.getTrackevent();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.rtc.TrackEvent.serializeBinaryToWriter
    );
  }
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.rtc.SubscriptionReply.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.rtc.Error.serializeBinaryToWriter
    );
  }
  f = message.getRegister();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.rtc.RegisterReply.serializeBinaryToWriter
    );
  }
  f = message.getOnlinesource();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.rtc.OnLineSourceReply.serializeBinaryToWriter
    );
  }
  f = message.getViewsource();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.rtc.ViewSourceReply.serializeBinaryToWriter
    );
  }
  f = message.getWantconnect();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.rtc.WantConnectReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional JoinReply join = 1;
 * @return {?proto.rtc.JoinReply}
 */
proto.rtc.Reply.prototype.getJoin = function() {
  return /** @type{?proto.rtc.JoinReply} */ (
    jspb.Message.getWrapperField(this, proto.rtc.JoinReply, 1));
};


/**
 * @param {?proto.rtc.JoinReply|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setJoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearJoin = function() {
  return this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SessionDescription description = 2;
 * @return {?proto.rtc.SessionDescription}
 */
proto.rtc.Reply.prototype.getDescription = function() {
  return /** @type{?proto.rtc.SessionDescription} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SessionDescription, 2));
};


/**
 * @param {?proto.rtc.SessionDescription|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setDescription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Trickle trickle = 3;
 * @return {?proto.rtc.Trickle}
 */
proto.rtc.Reply.prototype.getTrickle = function() {
  return /** @type{?proto.rtc.Trickle} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Trickle, 3));
};


/**
 * @param {?proto.rtc.Trickle|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setTrickle = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearTrickle = function() {
  return this.setTrickle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasTrickle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TrackEvent trackEvent = 4;
 * @return {?proto.rtc.TrackEvent}
 */
proto.rtc.Reply.prototype.getTrackevent = function() {
  return /** @type{?proto.rtc.TrackEvent} */ (
    jspb.Message.getWrapperField(this, proto.rtc.TrackEvent, 4));
};


/**
 * @param {?proto.rtc.TrackEvent|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setTrackevent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearTrackevent = function() {
  return this.setTrackevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasTrackevent = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SubscriptionReply subscription = 5;
 * @return {?proto.rtc.SubscriptionReply}
 */
proto.rtc.Reply.prototype.getSubscription = function() {
  return /** @type{?proto.rtc.SubscriptionReply} */ (
    jspb.Message.getWrapperField(this, proto.rtc.SubscriptionReply, 5));
};


/**
 * @param {?proto.rtc.SubscriptionReply|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setSubscription = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearSubscription = function() {
  return this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Error error = 7;
 * @return {?proto.rtc.Error}
 */
proto.rtc.Reply.prototype.getError = function() {
  return /** @type{?proto.rtc.Error} */ (
    jspb.Message.getWrapperField(this, proto.rtc.Error, 7));
};


/**
 * @param {?proto.rtc.Error|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasError = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RegisterReply register = 8;
 * @return {?proto.rtc.RegisterReply}
 */
proto.rtc.Reply.prototype.getRegister = function() {
  return /** @type{?proto.rtc.RegisterReply} */ (
    jspb.Message.getWrapperField(this, proto.rtc.RegisterReply, 8));
};


/**
 * @param {?proto.rtc.RegisterReply|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setRegister = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearRegister = function() {
  return this.setRegister(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasRegister = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OnLineSourceReply onLineSource = 9;
 * @return {?proto.rtc.OnLineSourceReply}
 */
proto.rtc.Reply.prototype.getOnlinesource = function() {
  return /** @type{?proto.rtc.OnLineSourceReply} */ (
    jspb.Message.getWrapperField(this, proto.rtc.OnLineSourceReply, 9));
};


/**
 * @param {?proto.rtc.OnLineSourceReply|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setOnlinesource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearOnlinesource = function() {
  return this.setOnlinesource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasOnlinesource = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ViewSourceReply viewSource = 10;
 * @return {?proto.rtc.ViewSourceReply}
 */
proto.rtc.Reply.prototype.getViewsource = function() {
  return /** @type{?proto.rtc.ViewSourceReply} */ (
    jspb.Message.getWrapperField(this, proto.rtc.ViewSourceReply, 10));
};


/**
 * @param {?proto.rtc.ViewSourceReply|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setViewsource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearViewsource = function() {
  return this.setViewsource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasViewsource = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional WantConnectReply wantConnect = 11;
 * @return {?proto.rtc.WantConnectReply}
 */
proto.rtc.Reply.prototype.getWantconnect = function() {
  return /** @type{?proto.rtc.WantConnectReply} */ (
    jspb.Message.getWrapperField(this, proto.rtc.WantConnectReply, 11));
};


/**
 * @param {?proto.rtc.WantConnectReply|undefined} value
 * @return {!proto.rtc.Reply} returns this
*/
proto.rtc.Reply.prototype.setWantconnect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.rtc.Reply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.rtc.Reply} returns this
 */
proto.rtc.Reply.prototype.clearWantconnect = function() {
  return this.setWantconnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rtc.Reply.prototype.hasWantconnect = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.rtc.Role = {
  ADMIN: 0,
  VIDEOSOURCE: 1,
  CONTROLER: 2,
  OBSERVE: 3,
  UNKNOWN: 4
};

/**
 * @enum {number}
 */
proto.rtc.ConnectType = {
  CONTROL: 0,
  VIEW: 1,
  MANAGE: 2
};

/**
 * @enum {number}
 */
proto.rtc.SourceType = {
  CAR: 0,
  FEED: 1,
  CAMERA: 2,
  BOAT: 3,
  SUBMARINE: 4
};

/**
 * @enum {number}
 */
proto.rtc.Target = {
  PUBLISHER: 0,
  SUBSCRIBER: 1
};

/**
 * @enum {number}
 */
proto.rtc.MediaType = {
  MEDIAUNKNOWN: 0,
  USERMEDIA: 1,
  SCREENCAPTURE: 2,
  CAVANS: 3,
  STREAMING: 4,
  VOIP: 5
};

goog.object.extend(exports, proto.rtc);
